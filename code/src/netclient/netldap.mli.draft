(* $Id$ *)

(** {2 Specifying the LDAP server} *)

class type ldap_server =
object
  method ldap_endpoint : Netsockaddr.socksymbol
  method ldap_timeout : float
  method ldap_peer_name : string option
  method ldap_tls_config : (module Netsys_crypto_types.TLS_CONFIG) option
end

val ldap_server : XXX -> ldap_server

(** {2 Specifying LDAP credentials} *)

type bind_creds

val simple_bind_creds : dn:string -> pw:string -> bind_creds
val sasl_bind_creds : dn:string -> user:string -> authz:string ->
                       creds:(string * string * (string * string)list)list ->
                       params:(string * string * bool) list ->
                       (module Netsys_sasl_types.SASL_MECHANISM) ->
                       bind_creds

(** {2 LDAP connections} *)

type ldap_connection

val connect_e : ldap_server -> Unixqueue.event_system -> ldap_connection engine
val connect : ldap_server -> ldap_connection

val close_e : ldap_connection -> unit engine
val close : ldap_connection -> unit

val conn_bind_e : bind_creds -> ldap_connection -> unit engine
val conn_bind : bind_creds -> ldap_connection -> unit

(** {2 LDAP searches} *)

(** {2 LDAP routines} *)

val test_bind_e : ldap_server -> bind_creds -> bool engine
val test_bind : ldap_server -> bind_creds -> bool

val retr_password_e : dn:string -> ldap_server -> bind_creds ->
                      (string * string * (string * string) list) list engine
val retr_password_e : dn:string -> ldap_server -> bind_creds ->
                      (string * string * (string * string) list) list
