OCamlnet is an enhanced system platform library for Ocaml. As the name
suggests, large parts of it have to do with network programming, but
it is actually not restricted to this. Other parts deal with the
management of multiple worker processes, and the interaction with
other programs running on the same machine. You can also view Ocamlnet
as an extension of the system interface as provided by the [Unix]
module of the standard library.

Overview: What you can do with OCamlnet:


{table intro}
{tr intro}
{td intro}Domain{tdend intro}
{td intro}Task{tdend intro}
{td intro}Protocol/mechanism{tdend intro}
{td intro}Frameworks{tdend intro}
{trend intro}
{tr intro}
{td intro}Web applications{tdend intro}
{td intro}Dynamic web content,{br x}
          Connect with web server,{br x}
          Standalone web servers{tdend intro}
{td intro}Web server connectors: CGI, FastCGI, SCGI, AJP.{br x}
          HTTP server{tdend intro}
{td intro}Netcgi (connector framework){tdend intro}
{trend intro}
{tr intro}
{td intro}Network applications{br x}(classic client/server){tdend intro}
{td intro}SunRPC clients,{br x}
          SunRPC servers{tdend intro}
{td intro}SunRPC binary protocol,{br x}
          SunRPC stub generator,{br x}
          Portmapper/RPCBIND,{br x}
          RPCSEC_GSS{tdend intro}
{td intro}[ ]{tdend intro}
{trend intro}
{tr intro}
{td intro}Network applications{br x}(modern client/server){tdend intro}
{td intro}Call HTTP interfaces,{br x}
          Provide HTTP interfaces{tdend intro}
{td intro}HTTP client,{br x}
          HTTP server,{br x}
          HTTP authentication{tdend intro}
{td intro}[ ]{tdend intro}
{trend intro}
{tr intro}
{td intro}Email applications{tdend intro}
{td intro}Create emails with attachments,{br x}
          Send emails,{br x}
          Parse emails,{br x}
          Interact with email server{tdend intro}
{td intro}SMTP client,{br x}
          POP client,{br x}
          SASL authentication{tdend intro}
{td intro}[ ]{tdend intro}
{trend intro}
{tr intro}
{td intro}Network utilities{tdend intro}
{td intro}Data download and upload,{br x}
          Encode and decode,{br x}
          Character sets,{br x}
          Structured formats,{br x}
          URLs,{br x}
          IPv6{tdend intro}
{td intro}HTTP client,{br x}
          FTP client{tdend intro}
{td intro}Netfs (filesystem framework){tdend intro}
{trend intro}
{tr intro}
{td intro}System utiltities{tdend intro}
{td intro}Invoke commands,{br x}
          Daemonize,{br x}
          Shared memory,{br x}
          Logging,{br x}
          Locales,{br x}
          Timers{tdend intro}
{td intro}[ ]{tdend intro}
{td intro}Netplex (multi-process daemons){tdend intro}
{trend intro}
{tr intro}
{td intro}Authentication and security{tdend intro}
{td intro}Network authentication,{br x}
          Integrity protection,{br x}
          Privacy{tdend intro}
{td intro}TLS (via GnuTLS),{br x}
          SASL,{br x}
          GSSAPI (Kerberos),{br x}
          LDAP client{tdend intro}
{td intro}Pluggable security providers{br x} for TLS, SASL, GSSAPI,{br x}
          Digests,{br x}
          Symmetric ciphers{tdend intro}
{trend intro}
{tableend intro}

{2 Introductory chapters}
{div guide}
{3 Guides}

- {!Ocamlnet4}: Changes in OCamlnet-4
- {!Foreword}: How Ocamlnet is organized
- {!Platform}: Which functions are available on which platform
  (POSIX/Win32). Also hints for portable programming.
- {!Ipv6}: The state of IPv6 support
- {!Tls}: TLS support
- {!Crypto}: Cryptography
- {!Authentication}: Authentication frameworks
- {!Credentials}: How to express and store credentials
- {!Gssapi}: The GSSAPI security layer
- {!Regexp}: Regular expression backends

{divend guide}

{2 Contents by library}

{ul
  {- {!Intro.ch_base}
     {ul
       {- {!Intro.netstring}}
       {- {!Intro.netunidata}}
       {- {!Intro.netzip}}
       {- {!Intro.equeue}}
       {- {!Intro.netplex}}
       {- {!Intro.netshm}}
       {- {!Intro.netsys}}
     }
  }
  {- {!Intro.ch_web}
     {ul
       {- {!Intro.netcgi2}}
       {- {!Intro.netcgi2_apache}}
       {- {!Intro.netcgi2_plex}}
       {- {!Intro.nethttpd}}
     }
  }
  {- {!Intro.ch_cs}
     {ul
       {- {!Intro.rpc}}
       {- {!Intro.rpc_local}}
       {- {!Intro.rpc_xti}}
     }
  }
  {- {!Intro.ch_comp}
     {ul
       {- {!Intro.netcamlbox}}
       {- {!Intro.netmulticore}}
     }
  }
  {- {!Intro.ch_netproto}
     {ul
       {- {!Intro.netclient}}
     }
  }
}





{1:ch_base Base Libraries}


{div guide}
{3:ch_base_guides Guides}

- {!module:Netchannels_tut}: The [Netchannels] tutorial - {b strongly 
  recommended read!}
- {!module:Netmime_tut}: The [Netmime] tutorial
- {!module:Netsendmail_tut}: The [Netsendmail] tutorial
- {!module:Netulex_tut}: The [Netulex] tutorial
- {!module:Neturl_tut}: The [Neturl] tutorial
- {!module:Equeue_howto}: The Equeue, Unixqueue, and Engines HOWTO
- {!module:Equeue_intro}: Introduction to programming with [equeue]
- {!module:Netplex_intro}: Introduction to [Netplex]
- {!module:Netplex_advanced}: Advanced features of [Netplex]
- {!module:Netplex_admin}: Netplex administration guide
- {!module:Netshm_intro}: Shared Memory for IPC
- {!module:Shell_intro}: Motivation for [shell]

{divend guide}

{3:equeue_blog External articles}

{2:netstring The [netstring] library: string processing functions}

[netstring] focuses on string processing functions, and base definitions
for other libraries.

{!modules: 
   Netaccel
   Netaccel_link
   Netaddress
   Netasn1
   Netasn1_encode
   Netauth
   Netaux
   Netbuffer
   Netchannels
   Netchannels_crypto
   Netcompression
   Netconversion
   Netdate
   Netdn
   Netencoding
   Netfs
   Netglob
   Netgssapi_auth
   Netgssapi_support
   Nethtml
   Nethttp
   Netmappings
   Netmech_crammd5_sasl
   Netmech_digest_http
   Netmech_digest_sasl
   Netmech_gs2_sasl
   Netmech_krb5_sasl
   Netmech_plain_sasl
   Netmech_scram
   Netmech_scram_gssapi
   Netmech_scram_sasl
   Netmech_spnego_http
   Netmime
   Netmime_channels
   Netmime_header
   Netmime_string
   Netnumber
   Netoid
   Netpagebuffer
   Netsaslprep
   Netsendmail
   Netsockaddr
   Netstream
   Netstring_str
   Netstring_tstring
   Nettls_support
   Netulex
   Netunichar
   Neturl
   Neturl_ldap
   Netx509
   Netx509_pubkey
   Netx509_pubkey_crypto
   Netxdr
   Netxdr_mstring
}

{2:netstring_pcre The [netstring-pcre] library: additions for PCRE}

{!modules:
   Netstring_pcre
}

{2:netunidata The [netunidata] library: Unicode tables}

{!modules:
   Netunidata
}

{2:netzip The [netzip] library: compression for object channels}

Support for (un)compressing data on the fly with object channels.
Requires ocamlzip.

{!modules:
    Netgzip}

{2:equeue The [equeue] library: concurrent execution flows via event queues}

[equeue] is a fundamental library for event queues. It is mainly used
by a number of other libraries of Ocamlnet to parallelize network code
(so-called multiplexing).

{!modules:
   Equeue
   Unixqueue
   Unixqueue_pollset
   Unixqueue_select
   Uq_engines
   Uq_socks5
   Uq_resolver
   Uq_io
   Uq_client
   Uq_server
   Uq_multiplex
   Uq_transfer
   Uq_lwt
   Uq_libevent
   Uq_mt
}


{3:equeue_gtk The [equeue-gtk1] and [equeue-gtk2] extensions}

Extensions for [equeue] to integrate the event queue into user interfaces
made with lablgtk and lablgtk2

{!modules:
  Uq_gtk
}

{3:equeue_tcl The [equeue-tcl] extension}

Extension for [equeue] to integrate the event queue into user interfaces
made with labltk

{!modules:
  Uq_tcl
}

{2:netplex The [netplex] library: generic server framework}

The [netplex] library is a protocol-independent server framework. 
Especially, it can be used in conjunction with [nethttpd] to
build web servers, and with [rpc] to build RPC servers.

{!modules:
    Netplex_types
    Netplex_config
    Netplex_controller
    Netplex_container
    Netplex_sockserv
    Netplex_workload
    Netplex_kit
    Netplex_cenv
    Netplex_log
    Netplex_main
    Netplex_mp
    Netplex_mt
    Netplex_mutex
    Netplex_semaphore
    Netplex_sharedvar
    Netplex_mbox
    Netplex_encap
    Netplex_internal
    Rpc_netplex}
    

{2:shell The [shell] library: start external commands}

The [shell] library allows you to start external commands. It is integrated
into [equeue].

{!modules:
    Shell
    Shell_sys
    Shell_uq
    Shell_fs}


{2:netshm The [netshm] library: manage shared memory}

The [netshm] library manages a shared memory object either as hash table
or array. It is designed to be used in multi-processing program architectures.
Note that there is now also the much better {!Intro.netmulticore} library.

{!modules:
    Netshm
    Netshm_data
    Netshm_hashtbl
    Netshm_array}


{2:netsys The [netsys] library: system interfaces}

The [netsys] library contains a number of low-level functions used by
other Ocamlnet libraries.

{!modules:
    Platform
    Netexn
    Netlog
    Netsys
    Netsys_posix
    Netsys_oothr
    Netsys_signal
    Netsys_tmp
    Netsys_mem
    Netsys_sem
    Netsys_global
    Netsys_pollset
    Netsys_pollset_generic
    Netsys_pollset_posix
    Netsys_pollset_win32
    Netsys_win32
    Netsys_polypipe
    Netsys_polysocket
    Netsys_rng
    Netsys_crypto_types
    Netsys_crypto
    Netsys_crypto_modes
    Netsys_tls
    Netsys_ciphers
    Netsys_digests
    Netsys_gssapi
}


{2:gnutls The [nettls-gnutls] library: GnuTLS bindings}

{!modules:
    Nettls_gnutls
    Nettls_gnutls_bindings
    Nettls_nettle_bindings
}


{2:netgss The [netgss] library: GSSAPI bindings}

{!modules:
    Netgss
    Netgss_bindings
}

{1:ch_web Web Programming}

{div guide}

{3:ch_web_guides Guides}

- {!module:Netcgi_porting}: Porting [netcgi1] programs to [netcgi2]
- {!module:Nethttpd_intro}: Overview over the HTTP daemon

{divend guide}

{3:netcgi1 The [netcgi1] library}

The [netcgi1] library is no longer supported in Ocamlnet 3. Please
switch to [netcgi2].


{2:netcgi2 The [netcgi2] library: web application framework}

This is the revised library for Web applications, now called [netcgi2].

{!modules:
    Netcgi
    Netcgi_common
    Netcgi_cgi
    Netcgi_fcgi
    Netcgi_ajp
    Netcgi_scgi
    Netcgi_test
    Netcgi_dbi
    Netcgi1_compat}


{2:netcgi2_apache The [netcgi2-apache] library: run web apps inside Apache}

This is an Apache connector for the {!netcgi2} library.

{!modules:
    Netcgi_apache
    Netcgi_modtpl}

{2:netcgi2_plex The [netcgi2-plex] library: run web apps with Netplex}

Netplex support for running Netcgi2 connectors:

{!modules:
    Netcgi_plex}

{2:nethttpd The [nethttpd] library: standalone web apps}

The [nethttpd] library is a Web server component written in O'Caml. 
For a full web server, you'll also need [netplex].

{!modules:
   Nethttpd_types
   Nethttpd_kernel
   Nethttpd_reactor
   Nethttpd_engine
   Nethttpd_services
   Nethttpd_plex
   Nethttpd_util
}




{1:ch_cs Client/Server Programming}


{div guide}
{3:ch_cs_guides Guides}

- {!module:Rpc_intro}: Introduction
- {!module:Rpc_mapping_ref}: RPC Language Mapping Reference
- {!module:Rpc_intro_gss}: Securing RPC with the GSS-API

{divend guide}

{3:ch_cs_blog External articles}

{2:rpc The [rpc] library: SunRPC}

This library implements OncRPC (alias SunRPC).

{!modules:
   Rpc
   Rpc_program
   Rpc_client
   Rpc_simple_client
   Rpc_proxy
   Rpc_server
   Rpc_auth_sys
   Rpc_portmapper
   Rpc_portmapper_aux
   Rpc_portmapper_clnt
   Rpc_transport
   Rpc_packer
   Rpc_auth_gssapi
}

{2:rpc_local The [rpc-auth-local] extension: authentication for local sockets}

Authentication for local socket connections.

{!modules:
    Rpc_auth_local}

{2:rpc_xti The [rpc-xti] extension: System V helpers}

System V provides a network API called XTI in addition to the socket API.
This library allows it to connect to RPC services that can only be reached
over a local XTI connection ("cots" connection).

{!modules:
    Rpc_xti_client}



{1:ch_comp Parallel Computing}

{div guide}
{3:netmcore_intro Guides}

- {!module:Netmcore_basics}: Basics
- {!module:Netmcore_tut}: Tutorial

{divend guide}

{b Important change since OCaml-4.01:} This OCaml version changed the
semantics of the built-in primitives [caml_modify] and
[caml_initialize]. Essentially, it is no longer possible to modify
OCaml values residing outside the regular OCaml heap. As we do this
inside Netcamlbox and Netmulticore, this change affects these
libraries. Fortunately, there is a workaround on systems supporting weak
symbols (all ELF systems and OS X): Here, [caml_modify] and
[caml_initialize] are overridden by Ocamlnet so that they are
again compatible. Note that this is a global modification of the
runtime system!

{2:netcamlbox The [netcamlbox] library: message passing}

Camlbox is a fast message-passing system between processes running on
the same machine. It uses shared memory for communication. A message
sent to a Camlbox is only copied once, not twice.

{!modules:
    Netcamlbox}

{2:netmulticore The [netmulticore] library: compute jobs}

Netmulticore is an experimental framework for managing multiple
processes, and sending messages between them.

{!modules:
    Netmcore
    Netmcore_process
    Netmcore_mempool
    Netmcore_heap
    Netmcore_array
    Netmcore_buffer
    Netmcore_hashtbl
    Netmcore_matrix
    Netmcore_queue
    Netmcore_ref
    Netmcore_mutex
    Netmcore_sem
    Netmcore_condition
    Netmcore_camlbox
}




{1:ch_netproto Network Protocol Libraries}

{div guide}
{3:ch_netproto_guides Guides}

- {!module:Netclient_tut}: The Netclient tutorial (HTTP, FTP)

{divend guide}

{2:netclient The [netclient] library: HTTP, FTP, Telnet, POP, SMTP, LDAP}

This library includes clients for HTTP, Telnet, FTP, SMTP, POP, and LDAP.

{!modules:
   Nethttp_client
   Nethttp_client_conncache
   Nethttp_fs
   Netftp_client
   Netftp_data_endpoint
   Netftp_fs
   Netldap
   Nettelnet_client
   Netpop
   Netsmtp
}

{1 Trailer}

{2 Index}

{!indexlist}

{2 Authors}

The Ocamlnet libraries have been initially written by Gerd Stolpmann and
Patrick Doane.

Contributions by

- Nicolas George: Netdate
- Eric Stokes: FastCGI support
- Pierre Habouzit: SMTP client
- Christophe Troestler: Revised version of [netcgi]
- Deokhwan Kim: Support for EUC-KR

Sponsorships by

- Baretta s.r.l: Nethttpd
- California State University: SSL support for RPC, Netplex
