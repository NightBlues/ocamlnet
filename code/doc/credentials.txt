{1 Credentials}

{2:sasl Credentials for SASL}

For SASL credentials are specified as a list

{[ (string * string * (string * string) list) list ]}

which looks complicated and needs some explanations. Basically, this
list presents the authentication mechanism a number of encodings for
the same secret. The mechanism can then pick the encoding it can process
best. Every encoding of the secret is a tuple

{[ (type, data, params) ]}

where [type] and [data] are strings, and [params] is a
[(string * string) list) list] with [(name,value)] pairs.

Why supporting several encodings? First, there may be {b huge} differences in
the speed of the authentication mechanism, in particular when you compare
a cleartext password [pw] with the version of [pw] that is really used in
the mechanism, which is often a function of the password [kdf(pw)] (kdf =
key derivation function). These functions are designed to be slow.
Second, there may be a security benefit when a password database needs not
to store [pw], but can store [kdf(pw)], in particular on the server side.

All mechanisms support:

 - [type = "password"]: The [data] string is the raw, unprocessed password.
   Note that many mechanisms require that the password is a UTF-8 string,
   and some even request a certain UTF-8 form (the so-called string preparation
   of the password). The password type does not take any parameters.

The other types are mechanism-specific, and are usually only supported on
the server side:

 - [type = "authpassword-SCRAM-SHA-1"]: The [data] string is the "stored
   password" for the mechanism SCRAM-SHA-1. There is one parameter "info"
   containing the iteration count and the salt. These two strings are defined
   in RFC-5803. OCamlnet uses here intentionally the same format as is
   commonly used in LDAP servers for storing SCRAM credentials. See
   {!Netmech_scram_sasl.SCRAM} for sample code how to generate this encoding.

(This list will probably be extended.)

OCamlnet tries to support types conforming either to the pattern defined
in RFC 3112 or RFC 2307. See
{!Netsys_sasl_types.SASL_MECHANISM.init_credentials} for details.



{2:tls Credentials for TLS}

{2:gssapi Credentials for the GSSAPI}

