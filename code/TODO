OCAMLNET 4 RELEASE:
 - CHECK AGAIN UNIT TESTS - DONE
 - CHECK EXAMPLES
 - renames: xdr, xdr_mstring, mimestring - DONE
 - Netconversion refactoring - DONE
 - module refactoring so far needed (smaller executables)
 - IPv6:
    * Netsys_resolver: pluggable synchronous resolvers
    * Netsys_resolver.Current.get_host_by_name
    * Netsys_resolver: current_localhost, current_any
    * Netsys_resolver.enable_ipv6
    * use that everywhere
    * Uq_resolver: when resolver is set, also change Netsys_resolver
    * Rpc_server:
        - Localhost: bind to current_localhost
        - Portmapped: bind to current_any
        - use RPCBIND to register if possible
    * Rpc_client:
        - if possible use RPCBIND to get detailed info
        - prefer IPv6 only if IPv6 is enabled
 - mod_apache build errors
 - gnutls build warnings
 - integrate nethttpd-for-netcgi2
 - DOC UPDATE
    * remove all the ocamlnet 3 links
    * OCamlnet 4 intro
       - also: build changes, other changes
 - BUILD update
    * oasis
 - IF TIME:
    * Netshm for Mac
    * SASLprep light
    * Netplex: user-specific socket dirs
    * password files

User's wishes/fixes:
 - mode of netplex socket can be set in config file (T. Calderon)
 - setgid does not work (lookup wrong) (T. Calderon)


Netconversion:
 - findlib:
     netunidata
     netunidata.<charset>  e.g. netunidata.iso88592
     netunidata.<collection>  e.g. netunidata.all
 - Netunidata.load "<charset>"  or "<collection>"
             .lazy_load
             .disable
             .override
   (ex: Netdb)
 - checksums are always in-core

GSSAPI:
 - check when to delete contexts. Fix protocol interpreters  - DONE
 - implement channel bindings - DONE
 - check again use of buffers in GSSAPI system bindings - DONE
 - do not block threads during GSSAPI calls - DONE
 - protocol interpreters should return a gssapi_props object - DONE
 - check whether RPC + GSSAPI is compatible with Linux - DONE
 - clean up Netmech_scram_gssapi. Use the same credential format
   as for SASL. Describe this in credentials.txt
    * export Netmech_scram_sasl.extract_credentials (in Netmech_scram)
    * option for setting a context lifetime

Netmime:
 - remove email-specific header methods from class type. Provide them
   as additional functions (Netmime.Header) - DONE
 - move Netmime channel functions to Netmime_channels - DONE
 - Mimestring -> Netmime_string - DONE

getrandom()
 - Linux 3.17
 - https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c6e9d6f38894798696f23c8084ca7edbf16ee895

Nethttpd + auth:
 - implement the core of it rather low-level (Nethttpd_kernel)
   only HTTP_MECHANISM; no basic auth
 - service abstraction: parse config file; push authentication

Netmulticore2: see list of ideas on trac

Netshm on MacOS: do not use record locking on shared memory fd.
 - use second file in /tmp
 - put the name of the file into the shared memory segment
Extend Netshm for multi-threading
 - record locking is per process
Use Netshm as optional backend for Netplex_sharedvar
 - needs to be enabled by the user (because of kernel resource management)

 - Netcgi_common.cgi_delegation

SASL:
 - GS2-style channel bindings - DONE
 - PLAIN - DONE
 - CRAM-MD5 - DONE
    * TODO: saslprep if available
 - DIGEST-MD5 - DONE
    * Fix: also support charset=utf-8 in HTTP clients - DONE
 - Complete SCRAM:
    * session ID - WONT
    * props - DONE
    * better prefix for export - DONE
    * authPassword: authPassword-SCRAM-SHA-1 - DONE
 - more authPassword:
    * authPassword-MD5 and authPassword-SHA1 for PLAIN (RFC 3112)
    * userPassword: see RFC 2307
      http://www.openldap.org/faq/data/cache/347.html for ssha
    * overview: http://wiki2.dovecot.org/Authentication/PasswordSchemes
    * more secure:
      http://en.wikipedia.org/wiki/PBKDF2
      http://en.wikipedia.org/wiki/Crypt_(C)
      scrypt, bcrypt
    * TASK: check_password function implementing many of these schemes
      (useful for PLAIN)
    * TASK: update_password function that computes many of these schemes
    * TASK: implement digest-md5 scheme
    * TASK: read and write credentials, support many formats like
      /etc/passwd, htpasswd, htdigest, maybe even ldif
    * TASK: custom format. just convert (username*credentials) to/from yojson.
    * TASK: document all that!
 - support module Netsys_sasl - DONE
 - implement for POP - DONE
 - implement for SMTP  - DONE
 - GS2 bridge - DONE
 - SASLprep "light"

HTTP:
 - enhance digest and support new algorithms
   (httpauth-digest, see http://www.ietf.org/mail-archive/web/http-auth/current/maillist.html)
 - SCRAM for HTTP
   (httpauth-scram-auth. Very interesting:
    http://www.ietf.org/mail-archive/web/http-auth/current/msg01769.html)
 - Server-side authentication?
 - Auth framework? RFC 7235 - DONE
 - cookie jar for Http_client

TLS:
 - how to get unique identifiers for tls-unique channel binding?
   (RFC 5929) - WONT (found some discussion that tls-unique is broken)

 - check that downcasts are also possible for endpoints
 - Netsys_tls.recv: check performance

 - Also add `PEM_data to TLS config. Support that in Netplex parser.
 - document Netplex config for TLS - DONE
 - document new Netplex directives in netplex_admin.txt - DONE
 - Rpc_ssl: integrate into main rpc lib - DONE
 - remove watchdog
 - pop: also basic TLS support (like smtp) - DONE
 - telnet: add a "starttls" method (to be used by ftp client) - DONE
 - FTP: rfc4217 - DONE
   test servers: ftp.pca.dfn.de
 - delete openssl support - DONE


 - DONE: ensure that clients use a safe default config that only accepts
   approved CAs
    * support gnutls_certificate_set_x509_system_trust if defined
    * create_x509_credentials ~system_trust:true
    * check at configure time:
        /etc/ssl/ca-bundle.pem \
        /etc/ssl/certs/ca-certificates.crt \
        /etc/pki/tls/cert.pem \
        /usr/local/share/certs/ca-root-nss.crt \
        /etc/ssl/cert.pem
 - use ztstringbuf for all the other functions returning zero-terminated
   strings - DONE
 - implement alert support
     * DONE partially: peers always accept rehandshakes with identical config
     * Open: request rehandshakes
 - session cache
     * Netplex_cache. Like Netplex_sharedvar, but only strings, and
       with a timeout - DONE
 - Nethttpd_types.tls_props - DONE
 - Nethttpd_kernel: export tls_props - DONE
 - fill cgi env
     * HTTPS - DONE
     * other props (check what Apache uses and keep compatible)
       in Nethttpd_reactor.http_environment
       Missing:
       SSL_SESSION_RESUMED
       SSL_SECURE_RENEG
       SSL_COMPRESS_METHOD
       <cert>_M_VERSION
       <cert>_V_REMAIN
       <cert>_A_SIG
       <cert>_A_KEY
       <cert>_CERT
       SSL_TLS_SNI
       suffixes: T,I,G,S,D,UID
       numeric suffixies when several components exist (or use only the first)
 - Nethttpd: check that Host header and the certificate host name
   are identical - DONE
 - check that https redirects work - DONE
 - config: TLS name as user name
    * check client authentication - DONE
 - SNI:
     * server: probably need to select the cert to send.
       Figure out how to do that. (Maybe look at mod_gnutls?)
       THIS IS AUTOMATICALLY DONE BY GNUTLS! JUST ADD SEVERAL CERTS
       TO THE SESSION!
     * server: check that SNI name and "Host" header are identical
       NO! This wouldn't cover resumed sessions. Instead we match
       the "Host" header with the selected server cert.
     * client: just set the right hostname
 - Info:
   Since GnuTLS-3.1.2 session tickets are automatically enabled in the client.
   Also do something automatically for pre-3.1.2 versions?
 - implement renegotiation for nethttpd
    - i.e. some request needs a certificate
    - figure out how to do it. Idea: output a redirect to the same page,
      and request the rehandshake immediately after sending the 300
      response. That way the rehandshake is a special response message.
 - OCSP support ?

LATER:
 - DTLS support
     type dtls_config =
      { dtls_mtu : int;
        dtls_enable_cookies : bool;
        dtls_retrans_tmo : float;
        dtls_total_tmo : float;
      }

      * create_endpoint: ?dtls:dtls_config
      * get_dtls_timeout : endpoint -> float  (-1 if no DTLS is active)
      * cookies are implemented inside Nettls_gnutls. The GNUTLS session
        object is first created when the cookie phase is over.
      * always set dtls nonblocking mode, so that a recv with timeout is
        not needed
      * comments in uq_multiplex.ml for a DTLS-aware multiplex controller
      * testcase: use DTLS for RPC
      * open: how to clean up sessions that are idle for too long
        (maybe set limits: max_idle_time, max_sessions)


cleanup of all hex digit routines
  - should go to Netencoding

Shell_sys: 
 - there is no way to wait for a started process
 - get the subprocess watcher

out-of-heap values: implement this better

- Bug: Rpc_proxy + authenticated request + message timeout. 
  If the connect is refused, the exception is not immedietaly passed
  back to the caller. First the message must time out. Probably
  the timeout handler for the auth proto isn't removed.
  (Test case: plasma_admin) - DONE

- deprecate Uq_engines.watchdog
  Maybe we can have something else with "sensors".

- Netdate: allow to set the 2-digit year cutoff

- Netplex: provide simple message boxes (as recently developed for epig)
  DONE

- Netmcore: how to get the result of the first process? Joining does
  not work, even when the process is already done. The only workaround
  for now seems to be a Netplex_sharedvar. - DONE (join_nowait)

- Netmcore: do not chdir "/" - this is very surprising, and also not
  necessary as we are always in the foreground - DONE

- Netplex: the current controller should continue to exist in the registry
  even when the main function has terminated. For postprocessing. Define
  a different criterion for ending the lifetime of the controller.
  Solution: Netplex_main.run with extract_result callback. - DONE

- Netbuffer.add_char: is not inlined in Ocaml-4.00 - DONE

- %G in Netdate - DONE

ocaml-4.00: 
 - see patches. 
 - netsys_posix.ml: open_flags is ocaml-specific. Do this check outside
   the code - DONE
 - netstring_top.ml: needs -I +compiler-libs - DONE

Netdate:
 - Check timezone names. The current ones seem to be chosen randomly.

Netlocale:
 - nl_langinfo: use nl_langinfo_l if present
 - collect here some locale functions:
   - compare (strcoll)
   - sortkey (strxfrm)
   - format_monetary (strfmon)
   - format_number

Netstringprep:
 - implement the stringprep/SASLprep algorithm
 - need a number of tables (see the RFC, and Unicode)

container hooks: option to emit a stacktrace - DONE

Http_fs: also make the HTTP code available (like last_response_header) - DONE

CHECK:
 - ocamlopt with -g? DONE

If closefrom is available use this for spawn

Netplex socket dir: default should be /tmp/.netplex-<uid>

Netcamlbox: avoid using sem_getvalue - DONE

Netmcore_mempool:  - DONE
 - use Netsys_sem
 - add unlink_pool function
 - add pool_sem_cont function

Netmcore_heap: - DONE
 - store cont in "heap" record
 - use Netsys_sem
 - add heap_sem_cont function

Netmcore_sem: - DONE
 - use Netsys_sem

Linux: - UNDERSTOOD
  ./nqueens -mp2 runs out of pool mem. why?

check other examples

document:
 - Netsys_sem
 - Platform: mention Netsys_sem
 - Kernel_objects: explain persistency


Also test under other OS
 - FreeBSD
 - Solaris


OCAMLNET

----------------------------------------------------------------------
Major future directions:

- Continue TLS
  * Nethttpd - DONE
  * Ftp_client - DONE
  * integrate more of GnuTLS

- Integrate more protocols/improve implementations
  * NetDNS: finish & integrate
  * sftp: develop
  * async fastcgi client
  * RPC: support RPCBIND versions 3 and 4 (for IPv6 needed)
  * NFSv4 client as Netfs

- Security
  * Access GnuTLS crypto routines via Cryptokit-like API
  * GSS-API wrapper on C level (Kerberos support) - DONE
  * GSS-API and HTTP - "Negotiate" - DONE
  * GSS-API and FTP - DONE
  * SASL - DONE
  * SASL and POP - DONE
  * SASL and SMTP - DONE
  * Containers for credentials - DONE
  * Password hashing suite
  * Password files, e.g. LDIF-compatible
  * Protect RPC better against DoS attacks
  * Netcgi2/Nethttpd w/ authentication

- Performance
  * epoll - DONE
  * posix_spawn - DONE
  * RPC marshalling - DONE
  * Service monitors

- Documentation
  * Intro for netcgi
  * Better equeue docs - DONE
  * Better RPC docs (enterprise topics)
  * Lwt - DONE

- Usability
  * smoothen Netplex APIs
  * more delegation classes
  * Nethttpd: include more real web server features
     - authentication
     - relaying
  * Netcgi + Netplex: allow same config style as Nethttpd
  * ASN.1 string functions
     - decode - DONE
     - encode

- More async
  * Nethttpd services
  * async local file I/O

----------------------------------------------------------------------

Shell.command:
 - inherit_descriptors:bool
   If true, no additional attempt is made to close descriptors, and only the
   descriptors with close-on-exec flag are closed.
 - Impl: Do not pass Fda_close_except to spawn

add support options to docs
 - List of possible features to implement

- Optimization Netmcore_heap.add_immutable:
  If a pointer into the target heap is found, the data pointed to is
  not copied. Benefit: Immutable data structures (Set, Map)
  USER: plasma, Nn_notify
  - DONE

Netnumber plus add, sub

Netplex_controller: better data structure for connection list

Since Vista there is WSAPoll. Support it?

Http_client:
 - Option to limit the total number of concurrent connections
 - Report to the user:
    * whether more requests would be acceptable in general
      pipeline # can_open_more_connections
    * whether a certain request would be ok:
      pipeline # queue_length_for : http_call -> int
      returns the number of calls in this queue

docs: Depict mem architecture of netmcore (multiple heaps, pool)

fix reported problems

- Equeue_ssl: include function to extract cert fingerprint - DONE

- bug netcgi2-apache:
  add -Wl,--rpath,$(APACHE_OCAMLLIBDIR) to $(APXS) for builing the .so
  the --rpath option is platform-dependent, though

- Reverse proxy for Nethttpd

- ephemeral bug in Netplex: when the container shuts down, the controller
  may log a crit error EPIPE. This is not critical, though. Better:
  The container announces the shutdown, and the controller shuts its
  servers down at this moment.

- Rpc_server.auth_limit (m:auth_method) ...:
  limits authentication to certain programs/versions/procedures
- Rpc_server.name_auth_method (n:name) (m:auth_method)
  sets the name of the method

- Netplex:
  * Easier way to catch controller termination
    Netplex_cenv.on_system_shutdown
    (can use a plugin internally for the controller case) UNCLEAR
  * container # once f: The function f is only run once per socket service

- Nethttpd should respect Netcgi.*.default_exn_handler
  * Need more information
  * What would be the meaning of disabling default_exn_handler
    in (cgi-)config?
  * maybe it is just about unifying the two styles of error pages?
    (Nethttpd_util.std_error_response vs. Netcgi_common.error_page)

- add utility functions for password hashing
  (see /etc/passwd under Linux)

***

- RPC: support relaying specially: if a server simply wants to forward
  an RPC call unchanged to a different port, there is no need to decode
  the message fully.

Netstring:
 - add "parse_ls_l"
 - Ftp_fs: use parser for the output of "LIST" when there is no MLST command

Netmulticore:
 - type heap_descr - DONE
 - *_descr for each data structure - DONE
 - heap: be more careful with GC colors
 - heap: support r/w locks
 - heap: support recursive locks for modify
 - heap: allow custom ints
 - heap: helper function self_contained
 - Netmcore_buffer.gc: remove all unreferenced mem blocks
 - Netmcore_hashtbl.gc: shrink the table as far as possible
 - Netmcore_mutex: also provide crash-resilient type of mutex

Examples:
 - pipeline - DONE
 - nqueens - DONE
 - matrix
 - sort

Docs:
 - Multicore tutorial - DONE
 - Multicore memory management (background info)

Blogs:
 - Multicore announcement + test release - DONE
 - N-Queens - DONE
 - Pipeline
 - Matrix


IDEAS FOR OCAMLNET RECIPES:
 - How to maintain a set of cookies on the client side


Enhanced stream_fs:
 - read_file - DONE
 - write_file - DONE
 - metadata operations: ???
 - problem with normal write: how to signal that the operation is
   aborted?
   * abort_write method - DONE (cancel)

Enhanced token scanner:
  Mimestring.create_mime_scanner: Support further options:
   - Enable_comments / Disable_comments -> (, ) can be part of atoms
   - Enable_qstrings / Disable_qstrings -> "" can be part of atoms
   - Enable_domaintoken / Disable_domaintoken -> [ ] can be part of atoms
  New optional arguments:
    ~profile:`Null if true, comments, qstrings, domaintokens are disabled
     except explicitly enabled
    ~profile:`Email for traditional settgins
  Also, there should be a new kind of token, Delimited, with
   - Delimited(start_char, text, end_char)
     e.g. Delimited('<', url, '>')
  Delimited needs to be configured:
   - Delimited_tokens(start_char, end_char, forbidden_chars)
     e.g. Delimited_tokens('<', '>', [' '])

  Even better idea:
   - highly configurable scanner Netscan

- Http: factor streaming access functions out

- Neturl: internationalized URLs
  RFC 3492

- continue netmulticore

- Finishing pluggable DNS resolver
  * new iml Uq_engines.direct_socket_connector
  * Http_client - HALF DONE
    + open: Use Uq_resolver also in the async case
  * Telnet_client - DONE
  * Uq_socks5: - HALF DONE
    + open: Use Uq_resolver in an async way
  * raise Host_not_found if lookups fail! - DONE. We are now using
    Uq_resolver in Uq_engines.connector.
  * Set IPv6 prefs in Uq_resolver - DONE
  * integrate netdns
  * IPv6 for netdns

----------------------------------------------------------------------
Performance improvements after Ocamlnet 3.0
----------------------------------------------------------------------

A list of possible improvements, once interfaces are stable again:

- Implement Netplex_semaphore with POSIX semaphores for systems
  supporting them
  --> Do this when we have pollable semaphores!

   * pollable semaphores: emulate with pipes
     post : lock
            n = getvalue
            post
            if n=0 then write(pipe)
            unlock
     trywait : lock
            if trywait then
              n = getvalue
              if n=0 then read(pipe)
            else error
            unlock
     async_wait:
            poll for pipe(read)
            if readable then
              trywait

     Unix implementation (Netsys_psem, Uq_psem):
      - one named sem for lock
      - one names sem for sem
      - one named pipe for pipe
      - Linux: use eventfd instead of pipe

- Implement Netplex_sharedvar with Netshm shared memory for systems
  supporting that

----------------------------------------------------------------------
Implementation improvements after Ocamlnet 3.0
----------------------------------------------------------------------

- Update Equeue_intro:
   * Throw out the chapter about async channel
   * Include a chapter about Uq_io

- Configurable async name resolution (already started: Uq_resolver)
  [Maybe include netdns?]

- Improved shared memory support; RPC over shared memory
  [Depends very much on whether camlboxes can be made safer, and
   can be more easily integrated with equeue)

- Fix netplex + nethttpd + async API: netcgi cannot be used right now
  * Cheap impl.: uploaded data is always stored as file or in mem;
    generated data, too; make esys available in environment
  * Better impl: provide clean engine API in Nethttpd_engines
    (or new module Nethttpd_async_service)

- netplex component for monitoring:
   - ping RPC services, but also support for plugging in other protocols
   - post monitoring results to neighbors (UDP, optionally with multicasting)

- Fix ocamldoc warnings

- delegation classes for Netmime

- Fix Netplex_kit.start_helper_thread so that the component leaves
  `Starting state quickly

- Rpc_server:
   * support suspended state
   * in suspended state, the server is no longer reading new serialized
     calls. It is still emitting responses, though.
   * Rpc_server.suspend_on [ `Always | `Num_unresponded_calls of int
                           | `Num_connections of int ]
   * extended check for validity of messages


----------------------------------------------------------------------
Further ideas
----------------------------------------------------------------------

- camlboxes:
  * safer. E.g. detect when there are pointers to camlbox messages,
    and prevent then that the message can be freed
  * generic copy function that copies messages to the normal heap - DONE
  * support for bigarrays, int32 etc. The custom_ops need to be
    put into the camlbox by the receiver process - DONE
  * more flexible memory management, e.g. support messages with
    dynamic size

- ocamlrpcgen:
   * immutable records
   ...

- input/output channels with the possibility of intercepting
  (e.g. progress bars). Also for MIME bodies

- netconversion: support UTF-8 byte order marks

- netconversion: support for character case

- netconversion: support for Unicode db (implement normalization forms)
  * saslprep

- netbuffer: more search functions. Substring search. Maybe even globbing

- netdate: sanity checking (is the date valid)
  Optionally restrict Netdate.parse to certain patterns

  more calendar functions? Compat with calendar library?

- Nethttp.Header:
   missing: set_cookie_ct, get_set_cookie_ct

- implement cookie jar, optionally use it in http_client

- Focus RPC:
  * Rpc_server: Allow to set timeout for the server response itself
    (self-watching)
  * Annotations
  * Sandbox mode for decoding messages. In a first pass it is checked
    whether array and string sizes are all good (before allocating mem)

- Focus Win32:

  * CHECK: Call CancelIo to cancel the overlapped I/O requests when
    the pipe struct is freed?

- Focus Netplex:
  * Revisit: helper containers for multi-processing. Make it easy to
    define a template at system startup time, and to instantiate it
    later at any time

  * Message passing between containers: Containers can define a 
    message queue, and other containers can send XDR-able messages.
    Queues are referenced by a global naming scheme.

    OR: Netplex_queue. Ops:
     - add, also with max
     - take
     - wait until n>0
     - wait until n<N
     - "wait": also as async op
     - msg encoding: as for Netplex_sharedvar

  * Revisit: Netplex + UDP

- mmap memory:
  * also support for mprotect
  * Netsys_mem support also for other protocol interpreters than RPC

- Log of deprecated functions (Netlog). Enabled by default.

- "syslog_emulation": The syslog protocol itself

- Nethttpd + SSL: This could be made working by establishing another
  file descriptor abstraction

  class type layered_socket =
  object
    method read : string -> int -> int -> int
      (* EAGAIN in the blocking case *)

    method write : string -> int -> int -> int
      (* EAGAIN in the blocking case *)

    method write_eof : unit -> unit
      (* EAGAIN in the blocking case *)

    method shutdown : unit -> unit
      (* EAGAIN in the blocking case *)

    method block : [`Read|`Write|`Write_eof|`Shutdown] list -> tmo:float -> [`Read|`Write|`Write_eof|`Shutdown] list
      (* Blocks until one of these ops becomes possible, and indicates
         which. There is no guarantee, however - if a following [read]
         or [write] ends with [EAGAIN], one has to [block] again.
      *)	

    method translate : [`Read|`Write|`Write_eof|`Shutdown] list -> [`Read|`Write] list
      (* Translates a high-level I/O condition to a descriptor-level r/w
         condition. The argument says what the user waits upon: read
         and/or write. The return value says how to watch the file descriptor.
         The return value may depend on the internal state of the protocol
         engine.

         For non-blocking I/O, one should first translate the user
         request, wait until the fd is in one of the indicated states,
         then call read/write. If this results in [EAGAIN], the whole
         sequence is to be repeated.
       *)

    method fd : Unix.file_descr
    method inactivate : unit -> unit
  end

- Netplex + RPC + SSL: should be easy to configure

- support for CPS transformations

- async local file I/O

----------------------------------------------------------------------
Old stuff, check first
----------------------------------------------------------------------

Equeue:
	- Fix command engines as commented in the code.

netcgi2-plex:
	- Implement mount_dir/mount_at
	  Sched: 2.3
